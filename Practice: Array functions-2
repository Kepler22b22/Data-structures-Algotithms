

#include <iostream>
using namespace std;

struct Array
{
    int A[10];
    int size;
    int length;
};

void Display(struct Array arr)
{
    int i;
    cout<<"\nElements are\n";
    for(i=0; i<arr.length; i++)
        cout<<arr.A[i]<<" ";
}

void swap(int *x, int *y)
{
    int temp;
    temp = *x;
    *x = *y;
    *y = temp;
}

void InsertSort(Array *arr, int x)
{
    int i=arr->length-1;
    if(arr->length == arr->size)
        return;
    while(i>=0 && arr->A[i]>x)
    {
        arr->A[i+1] = arr->A[i];
        i--;
    }
    arr->A[i+1] = x;
    arr->length++;
}

int isSorted(Array arr)
{
    int i;
    for(i=0; i<arr.length-1; i++)
    {
        if(arr.A[i]>arr.A[i+1])
            return 0;
    }
    return 1;
}

void Rearrange(Array *arr)
{
    int i,j;
    i = 0;
    j = arr->length-1;
    while(i<j)
    {
        while(arr->A[i]<0)
            i++;
        while(arr->A[j]>=0)
            j--;
        if(i<j)
            swap(&arr->A[i], &arr->A[j]);
    }
}

Array *Merge(Array *arr1, Array *arr2)
{
    int i=0, j=0, k=0;
    Array *arr3 = new Array();
    
    while(i<arr1->length && j<arr2->length)
    {
        if(arr1->A[i] < arr2->A[j])
        {
            arr3->A[k] = arr1->A[i];
            k++;
            i++;
        }
        else
        {
            arr3->A[k] = arr2->A[j];
            k++;
            j++;
        }
    }
    for(; i<arr1->length; i++)
    {
        arr3->A[k++]= arr1->A[i];
        // k++;
        //i++;
    }
    for(; j<arr2->length; j++)
    {
        arr3->A[k++]= arr2->A[j];
        // k++;
        //j++;
    }
    arr3->length = arr1->length + arr2->length;
    arr3->size = 10;
    
    return arr3;
}

Array *Intersection(Array *arr1, Array *arr2)              //交集
{
    int i=0, j=0, k=0;
    Array *arr3 = new Array();
    
    while(i<arr1->length && j<arr2->length)
    {
        if(arr1->A[i] < arr2->A[j])
        {
            i++;
        }
        else if(arr1->A[i] > arr2->A[j])
        {
            j++;
        }
        else
        {
            arr3->A[k++] = arr2->A[i++];
            j++;
        }
    }
    arr3->length = k;
    arr3->size = 10;
    
    return arr3;
}

Array *Union(Array *arr1, Array *arr2)              // 并集
{
    int i=0, j=0, k=0;
    Array *arr3 = new Array();
    
    while(i<arr1->length && j<arr2->length)
    {
        if(arr1->A[i] < arr2->A[j])
        {
            arr3->A[k++] = arr1->A[i++];
        }
         else if(arr1->A[i] > arr2->A[j])
        {
            arr3->A[k++] = arr2->A[j++];
        }
        else
        {
            arr3->A[k++] = arr1->A[i++];
            j++;
        }
    }
    for(; i<arr1->length; i++)
    {
        arr3->A[k++]= arr1->A[i];
    }
    for(; j<arr2->length; j++)
    {
        arr3->A[k++]= arr2->A[j];
    }
    arr3->length = k;
    arr3->size = 10;
    
    return arr3;
}

Array *Difference(Array *arr1, Array *arr2)              // 并集
{
    int i=0, j=0, k=0;
    Array *arr3 = new Array();
    
    while(i<arr1->length && j<arr2->length)
    {
        if(arr1->A[i] < arr2->A[j])
        {
            arr3->A[k++] = arr1->A[i++];
        }
         else if(arr1->A[i] > arr2->A[j])
        {
            arr3->A[k++] = arr2->A[j++];
        }
        else
        {
            i++;
            j++;
        }
    }
    for(; i<arr1->length; i++)
    {
        arr3->A[k++]= arr1->A[i];
    }
    for(; j<arr2->length; j++)
    {
        arr3->A[k++]= arr2->A[j];
    }
    arr3->length = k;
    arr3->size = 10;
    
    return arr3;
}

int main()
{
    struct Array arr1={{2, 6, 10, 15, 25}, 10, 5};
    struct Array arr2={{3, 6, 7, 15, 20}, 10, 5};
    struct Array *arr3;
    
    // InsertSort(&arr, -1);
    //cout<<isSorted(arr)<<endl;
    // Rearrange(&arr);
    // arr3 = Merge(&arr1, &arr2);
    // arr3 = Intersection(&arr1, &arr2);
    // arr3 = Union(&arr1, &arr2);
    arr3 = Difference(&arr1, &arr2);
    Display(*arr3);

    return 0;
}

