
#include <iostream>
using namespace std;

struct Array
{
    int A[10];
    int size;
    int length;
};

void Display(struct Array arr)
{
    int i;
    cout<<"\nElements are\n";
    for(i=0; i<arr.length; i++)
        cout<<arr.A[i]<<" ";
}

void Append(struct Array *arr, int x)
{
    if(arr->length<arr->size)
        arr->A[arr->length++] = x;
}

void Insert(struct Array *arr, int index, int x)
{
    int i;
    if(index>=0 && index<=arr->length)
    {
        for(i=arr->length; i>index; i--)
            arr->A[i] = arr->A[i-1];
        arr->A[index] = x;
        arr->length++;
    }
}

int Delete(struct Array *arr, int index)
{
    int x=0;
    int i;
    if(index>=0 && index<=arr->length)
    {
        x = arr->A[index];
        for(i=index; i<arr->length-1; i++)
        {
            arr->A[i] = arr->A[i+1];
        }
        arr->length--;
        return x;
    }
    
    return 0;
}

void swap(int *x, int *y)
{
    int temp;
    temp = *x;
    *x = *y;
    *y = temp;
}

int LinearSearch(struct Array *arr, int key)
{
    int i=0;
    for(; i<arr->length; i++)
    {
        if(key==arr->A[i])
        {
            swap(&arr->A[i], &arr->A[0]);           // swap(&arr->A[i], &arr->A[i-1]); 
            return i;
        }
    }
    return -1;
}

//int BinarySearch(struct Array arr, int key)
//{
//    int l, h, mid;
//    l = 0;
//    h = arr.length-1;
//    while(l<=h)
//    {
//        mid = (l+h)/2;
//        if(arr.A[mid] == key)
//            return mid;
//        else if(key < arr.A[mid])
//            h = mid-1;
//        else
//            l = mid+1;
//    }
//    return -1;
//}

int RBinarySearch(int a[], int l, int h, int key)
{
    int mid;
    
    if(l<=h)
    {
        mid = (l+h)/2;
        if(key == a[mid])
            return mid;
        else if(key < a[mid])
            return RBinarySearch(a, l, mid-1, key);
        else
            return RBinarySearch(a, mid+1, h, key);
    }
    return -1;
}

int Get(struct Array arr, int index)
{
    if(index>=0 && index<arr.length)
        return arr.A[index];
    return -1;
}

void Set(struct Array *arr, int index, int x)
{
    if(index>=0 && index<arr->length)
        arr->A[index] = x;
}

int Max(struct Array arr)
{
    int max=arr.A[0];
    int i=1;
    for(; i<arr.length; i++)
    {
        if(arr.A[i] > max)
            max = arr.A[i];
    }
    return max;
}

int Min(struct Array arr)
{
    int min=arr.A[0];
    int i=0;
    for(; i<arr.length; i++)
    {
        if(arr.A[i] < min)
            min = arr.A[i];
    }
    return min;
}

int Sum(struct Array arr)
{
    int i=0, sum=0;
    for(; i<arr.length; i++)
        sum = sum + arr.A[i];
    return sum;
}

float Avg(struct Array arr)
{
    return (float)Sum(arr)/arr.length;
}

//void Reverse(struct Array *arr)
//{
//    int *B;
//    int i, j;
//    
//    B = new int(arr->length);
//    for(i=arr->length-1, j=0; i>=0; i--, j++)
//        B[j] = arr->A[i];
//    for(i=0; i<arr->length; i++)
//        arr->A[i] = B[i];
//}

void Reverse2(struct Array *arr)
{
    int i,j;
    int temp;
    for(i=0, j=arr->length-1; i<j; i++, j--)
    {
        temp = arr->A[i];
        arr->A[i] = arr->A[j];
        arr->A[j] = temp;
    }
}

int main()
{
     struct Array arr={{1, 3, 4, 5, 6}, 10, 5};
    
    // Append(&arr, 7);
    // Insert(&arr, 0, 10);
    // cout<<Delete(&arr, 0);
    // cout<<LinearSearch(&arr, 5);
    // cout<<BinarySearch(arr, 5);
    // cout<<RBinarySearch(arr.A, 0, arr.length, 5);
    // cout<<Get(arr, 2);
    // Set(&arr, 0, 1);
    // cout<<Min(arr);
    // cout<<Avg(arr);
    Reverse2(&arr);
    Display(arr);

    return 0;
}
